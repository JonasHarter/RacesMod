package TargetRestrictors
	import Unit2
	import ArrayList

	/* General Notes:
		Ally includes you yourself
		Invulnerable unit cannot recieve triggered damage
		Use right damage triggers to deal with spell immune & etheral
	*/
		
	public abstract class TargetRestrictor
	
		string error = "You must add an error message"
	
		function check(unit source, unit target) returns boolean
			return true

	// ### Enum'ed

	// Flying
	public class Flying extends TargetRestrictor
	
		construct()
			this.error = "You cannot target a flying unit"
			
		override function check(unit source, unit target) returns boolean
			return target.isUnitType(UNIT_TYPE_FLYING)
			
	// Ground, basically non-flying
	public class Ground extends TargetRestrictor
	
		construct()
			this.error = "You must target a flying unit"
			
		override function check(unit source, unit target) returns boolean
			return target.isUnitType(UNIT_TYPE_GROUND)
			
	// Structure
	public class Structure extends TargetRestrictor
	
		construct()
			this.error = "You cannot target a building"
			
		override function check(unit source, unit target) returns boolean
			return target.isUnitType(UNIT_TYPE_STRUCTURE)
			
	// Ally
	public class Ally extends TargetRestrictor
	
		construct()
			this.error = "You cannot target friendly units"
			
		override function check(unit source, unit target) returns boolean
			return source.getOwner().isAllyOf(target.getOwner())
			
	// Summoned
	public class Summoned extends TargetRestrictor
	
		construct()
			this.error = "You cannot target summoned units"
			
		override function check(unit source, unit target) returns boolean
			return target.isUnitType(UNIT_TYPE_SUMMONED)
			
	// Magic-Immune
	public class MagicImmune extends TargetRestrictor
	
		construct()
			this.error = "You cannot target magic immune units"
			
		override function check(unit source, unit target) returns boolean
			return target.isUnitType(UNIT_TYPE_MAGIC_IMMUNE)
			
	// Invincible
	public class Invincible extends TargetRestrictor
	
		construct()
			this.error = "You cannot target invincible units"
			
		override function check(unit source, unit target) returns boolean
			let hp = target.getHP()
			source.damageTargetUltimate(target, 1)
			let hp2 = target.getHP()
			target.setHP(hp)
			return hp == hp2
			
			
	// ### Not in Enum
	
	/** Restricts targeting to certain unit types **/
	public class TypeList extends TargetRestrictor
		
		private ArrayList<int> targets
		/** Restricts targeting from certain unit types**/
		boolean invert = false
	
		construct(string error, ArrayList<int> targets)
			this.error = error
			this.targets = targets
			
		override function check(unit source, unit target) returns boolean
			for ut in targets
				if target.getTypeId() == ut
					return invert
			return not invert
	
	
	
	
	
	
	
	
				/*UNIT_TYPE_HERO UNIT_TYPE_DEAD   UNIT_TYPE_ATTACKS_FLYING  UNIT_TYPE_ATTACKS_GROUND
UNIT_TYPE_MELEE_ATTACKER UNIT_TYPE_RANGED_ATTACKER  UNIT_TYPE_GIANT UNIT_TYPE_SUMMONED  UNIT_TYPE_STUNNED UNIT_TYPE_PLAGUED
UNIT_TYPE_SNARED UNIT_TYPE_UNDEAD UNIT_TYPE_MECHANICAL UNIT_TYPE_PEON UNIT_TYPE_SAPPER UNIT_TYPE_TOWNHALL UNIT_TYPE_ANCIENT 
 UNIT_TYPE_TAUREN UNIT_TYPE_POISONED UNIT_TYPE_POLYMORPHED UNIT_TYPE_SLEEPING
 UNIT_TYPE_RESISTANT UNIT_TYPE_ETHEREAL UNIT_TYPE_MAGIC_IMMUNE */
 
		/*
		alive, undead
		allied, owned, friendly, enemy, neutal, 
		+-hero, organic, mech, ancient, structure, +-sucidal, ward
		in-vul
		not-self
		fullhealth, hasMana, fullMana
		classes: ancient, giant, mech, neutral, suicidal, tauren, town-hall, tree, undead, walkable, ward, worker
		*/
