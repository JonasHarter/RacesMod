package UnitSound
	import ArrayList
	import HashMap
	import Sound2
		
	public enum UnitSoundType
		Death
		//Pissed
		Ready
		Warcry
		What
		Yes
		YesAttack

	init
		CreateTrigger()
			..registerTimerEvent( 0.1, true )
			..addAction( function unitSoundTick )
	
	function unitSoundTick()
		UnitSound.tick()

	public class UnitSound
	
		//############### Management ###############
	
		// HashMap for fast loockup on order
		private static HashMap<int, UnitSound> unitSounds = new HashMap<int, UnitSound>()
		// Array for iterating purposes
		private static ArrayList<UnitSound> unitSoundsArray = new ArrayList<UnitSound>()
		
		private int delay = 0
		
		/** Don't create UnitSound Objects during initialization **/
		construct(int ut)
			unitSounds.put(ut, this)
			unitSoundsArray.add(this)
			
		static function tick()
			for UnitSound us in UnitSound.unitSoundsArray
				if us.delay > 0
					us.delay -= 100
		
		//############### Play Sounds ###############
		
		private ArrayList<sound> s_current
		private ArrayList<sound> s_death = new ArrayList<sound>()
		private ArrayList<sound> s_ready = new ArrayList<sound>()
		private ArrayList<sound> s_warcry = new ArrayList<sound>()
		private ArrayList<sound> s_what = new ArrayList<sound>()
		private ArrayList<sound> s_yes = new ArrayList<sound>()
		private ArrayList<sound> s_yesattack = new ArrayList<sound>()
				
		
		/** Returns the UnitSound Object for a specific unittype **/
		static function get(int ut) returns UnitSound
			return unitSounds.get(ut)

		/** Plays the UnitSoundType on **/
		function play(unit u, UnitSoundType t)
			
			setUnitSoundType(t)
			if s_current.getSize() == 0
				return
			sound s = getRandomSound(s_current)
			if t != UnitSoundType.Ready and t != UnitSoundType.Death
				if delay > 0 
					return
				delay = s.getDuration()
			if u.getOwner() == GetLocalPlayer()
				AttachSoundToUnit(s, u)
				StartSound(s)
					
		private function getRandomSound(ArrayList<sound> list) returns sound
			return list.get( GetRandomInt(0, list.getSize() - 1))
			
		//############### Create Sounds ###############
			
		private string prefix = ""
		private string suffix = ".wav"
		private real pitch

		private let volume = 177//127
		private let minDist = 3000.0
		private let maxDist = 10000.0
		private let distCutoff = 1000000.0
		private string eaxEffect = "DefaultEAXON"
		private int channel = 0
		
		/**Sets the options for the following addUnitSound calls
			prefix: The prefix to each filename string given at addUnitSound
			suffix: The suffix to each filename string given at addUnitSound. Usually .wav
			isHero: Wether this unit is a hero
			pitch: Default is 1.0
		**/
		function setOptions(string prefix, string suffix, bool isHero, real pitch)
			this.prefix = prefix
			this.suffix = suffix
			this.pitch = pitch
			if isHero
				eaxEffect = "HeroAcksEAX"
		
		/** Sets the UnitSoundType for addUnitSound (or internal play) calls **/
		function setUnitSoundType(UnitSoundType ust)
			if ust == UnitSoundType.What
				s_current = s_what
				channel = 1
			else if ust == UnitSoundType.Warcry
				s_current = s_warcry
				channel = 1
			else if ust == UnitSoundType.YesAttack
				s_current = s_yesattack
				channel = 2
			else if ust == UnitSoundType.Yes
				s_current = s_yes
				channel = 3
			else if ust == UnitSoundType.Ready
				s_current = s_ready
				channel = 4
			else if ust == UnitSoundType.Death
				s_current = s_death
				channel = 11
			
		/** Adds a new sound to the object, based on the set options **/	
		function addUnitSound(string s)
			sound xx = CreateSound(prefix + s + suffix, false, true, true, 10, 10, eaxEffect)
			xx.setPitch(pitch)
			xx.setVolume(volume)
			xx.setConeAngles(0, 0, volume)
			xx.setDistances(minDist, maxDist)
			xx.setCutoff(distCutoff)
			xx.setChannel(channel)
			s_current.add(xx)
		
			