package Fuff
    import FuffUnitStateSet
    import LinkedList
    import public FuffFunction

    //TODO auto rate unit iterations
    //TODO BlizzApi -> BuffEvent, getBuffLevel

    LinkedList<Fuff> allFuffs = new LinkedList<Fuff>()
    real FUFF_TICKRATE = 1.0

    LinkedList<Fuff> autoFillFuffs = new LinkedList<Fuff>()
    group allUnitsHolder
    integer skipCounterSave = 0
    integer nextPlayer = 0
    //TODO Find a good value
    integer MAX_FUFFS_PER_TICK = 2

    init
        CreateTrigger()
            ..registerTimerEvent(ANIMATION_PERIOD, true)
            ..addAction(function unitLoop)
        CreateTrigger()
            ..registerTimerEvent(ANIMATION_PERIOD, true)
            ..addAction(function fuffLoop)

    function setNextPlayer()
        nextPlayer++
        for i = nextPlayer to bj_MAX_PLAYER_SLOTS
            if Player(i).isIngame()
                nextPlayer = i
                return
        for i = 0 to bj_MAX_PLAYER_SLOTS
            if Player(i).isIngame()
                nextPlayer = i
                return

    /**
        Checks all units for some fuffs and adds them
    **/
    function unitLoop()
        if autoFillFuffs.size() == 0
            return
        // Get fuffs for this iteration
        LinkedList<Fuff> todoFuffs = new LinkedList<Fuff>()
        integer skipCounter = skipCounterSave
        integer doneCounter = 0
        for Fuff fuff in autoFillFuffs
            if skipCounter > 0
                skipCounter--
            else if doneCounter >= MAX_FUFFS_PER_TICK
                break
            else
                doneCounter++
                todoFuffs.add(fuff)
        skipCounterSave += doneCounter
        if skipCounterSave >= autoFillFuffs.size()
            skipCounterSave = 0
        // Update units when all fuffs are through
        if skipCounterSave == 0
            allUnitsHolder.destr()
            allUnitsHolder = GetUnitsInRectAll(GetPlayableMapRect())
        // Work on units
        for unit u in allUnitsHolder
            for Fuff fuff in todoFuffs
                fuff.checkUnit(u)
        destroy todoFuffs

    /**
        Updates the fuffs
    **/           
    function fuffLoop()
        if allFuffs.size() == 0
            return
        for Fuff fuff in allFuffs
            fuff.run()
    
    public abstract class Fuff
        
        // units that are affected by this buff
        private FuffUnitStateSet affectedUnits = new FuffUnitStateSet()
        private real time = 0.0
        // The functions to run
        protected FuffFunction applyFunc
        protected FuffFunction tickFunc
        protected FuffFunction removeFunc
        
        construct()
            autoFillFuffs.add(this)
            allFuffs.add(this)

        construct(FuffFunction applyFunc, FuffFunction tickFunc, FuffFunction removeFunc)
            this.applyFunc = applyFunc
            this.tickFunc = tickFunc
            this.removeFunc = removeFunc
            autoFillFuffs.add(this)
            allFuffs.add(this)
                
        // Adds unit if it has the buff
        function checkUnit(unit u)
            integer level = checkForBuff(u)
            if level > 0
                affectedUnits.add(u, level)
                    
        // Gets the level for fuff on the unit
        abstract function checkForBuff(unit u) returns integer

        function run()
            time += ANIMATION_PERIOD
            for FuffUnitState fuffUnitState in affectedUnits.getList()
                doUnit(fuffUnitState)
            if time >= FUFF_TICKRATE
                time -= FUFF_TICKRATE
        
        private function doUnit(FuffUnitState fuffUnitState)
            unit u = fuffUnitState.getUnit()
            integer previousLevel = fuffUnitState.getLevel()
            integer currentLevel = checkForBuff(fuffUnitState.getUnit())
            boolean isApplied = fuffUnitState.isApplied()
            // Buff lost
            if currentLevel <= 0
                remove(u, previousLevel)
                affectedUnits.remove(u)
                return
            // Buff is running
            if time >= FUFF_TICKRATE and isApplied
                tick(u, currentLevel)
                return
            // Buff level changed
            if previousLevel != currentLevel and isApplied
                remove(u, previousLevel)
                fuffUnitState.setApplied(false)
                isApplied = false
            // Buff is new or level changed
            if not isApplied
                fuffUnitState.setApplied(true)
                apply(u, currentLevel)
                fuffUnitState.setLevel(currentLevel)
                return
            
        function apply(unit u, integer level)
            if applyFunc != null
                applyFunc.do(u, level)

        function tick(unit u, integer level)
            if tickFunc != null
                tickFunc.do(u, level)

        function remove(unit u, integer level)
            if removeFunc != null
                removeFunc.do(u, level)